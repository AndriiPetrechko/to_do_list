{"version":3,"sources":["components/Notes.js","App.js","components/utils.js","serviceWorker.js","index.js"],"names":["Note","className","onClick","this","props","onDelete","text","Component","CreateNote","onTextchange","event","setState","target","value","onReset","onSave","onCreate","state","onChange","Button","variant","Notes","notes","map","index","key","App","onNoteDelete","indexToRemove","oldstate","array","slice","concat","onNoteCreate","newNoteText","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAIMA,G,6KAEE,OACI,yBAAKC,UAAU,aACX,0BAAMA,UAAU,cAAcC,QAASC,KAAKC,MAAMC,UAAlD,UACCF,KAAKC,MAAME,U,GALTC,cAWbC,E,kDACF,WAAYJ,GAAO,IAAD,8BACd,cAAMA,IAMVK,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVL,KAAMI,EAAME,OAAOC,SATT,EAalBC,QAAU,SAACJ,GACP,EAAKC,SAAS,CACVL,KAAM,MAfI,EAmBlBS,OAAS,WACL,EAAKX,MAAMY,SAAS,EAAKC,MAAMX,MAC/B,EAAKQ,WAnBL,EAAKG,MAAQ,CACTX,KAAM,IAHI,E,qDAyBd,OACI,yBAAKL,UAAU,gBACX,8BAAUiB,SAAUf,KAAKM,aAAcI,MAAOV,KAAKc,MAAMX,KAAML,UAAU,cAAzE,KACA,yBAAKA,UAAU,oBACX,kBAACkB,EAAA,EAAD,CAAQC,QAAQ,UAAUlB,QAASC,KAAKY,QAAxC,sDACA,kBAACI,EAAA,EAAD,CAAQC,QAAQ,YAAYlB,QAASC,KAAKW,SAA1C,4D,GA/BKP,aAsCJc,E,uKACP,IAAD,OACL,OACI,yBAAKpB,UAAU,SACX,kBAAC,EAAD,CAAYe,SAAUb,KAAKC,MAAMY,WAChCb,KAAKC,MAAMkB,MAAMC,KAAI,SAACjB,EAAMkB,GAAP,OAClB,kBAAC,EAAD,CACIlB,KAAMA,EACNmB,IAAKD,EACLnB,SAAU,kBAAM,EAAKD,MAAMC,SAASmB,c,GATzBjB,a,QChDdmB,E,kDACnB,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAURuB,aAAe,SAAAC,GACb,EAAKjB,UAAS,SAAAkB,GACZ,MAAO,CACLP,OCpBqBQ,EDoBDD,EAASP,MCpBDE,EDoBQI,ECnBxCE,EAAMC,MAAM,EAAGP,GAAOQ,OAAOF,EAAMC,MAAMP,EAAQ,MADzB,IAACM,EAAON,MDMf,EAmBnBS,aAAe,SAAAC,GACb,EAAKvB,UAAS,SAAAkB,GACZ,MAAO,CACLP,MAAO,CAACY,GAAaF,OAAOH,EAASP,YApBzC,EAAKL,MAAQ,CACXK,MAAO,CACL,4FACA,mGACA,iHANa,E,qDA4BjB,OACE,6BACE,kBAACa,EAAA,EAAD,KACE,kBAAC,EAAD,CACEb,MAAOnB,KAAKc,MAAMK,MAClBjB,SAAUF,KAAKwB,aACfX,SAAUb,KAAK8B,qB,GAnCM1B,aEOb6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.314b9491.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Button} from 'react-bootstrap'\r\nimport './notes.css';\r\n\r\nclass Note extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"note_item\">\r\n                <span className=\"note_delete\" onClick={this.props.onDelete}> &times; </span>\r\n                {this.props.text}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass CreateNote extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            text: '',\r\n        };\r\n    }\r\n\r\n    onTextchange = (event) => {\r\n        this.setState({\r\n            text: event.target.value\r\n        });\r\n    };\r\n\r\n    onReset = (event) => {\r\n        this.setState({\r\n            text: ''\r\n        });\r\n    }\r\n\r\n    onSave = () => {\r\n        this.props.onCreate(this.state.text);\r\n        this.onReset();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Notes_Create\">\r\n                <textarea onChange={this.onTextchange} value={this.state.text} className=\"input_text\"> </textarea>\r\n                <div className=\"notes_create_btn\">\r\n                    <Button variant=\"success\" onClick={this.onSave}> Зберегти </Button>\r\n                    <Button variant=\"secondary\" onClick={this.onReset}> Видалити </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default class Notes extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Notes\">\r\n                <CreateNote onCreate={this.props.onCreate} />\r\n                {this.props.notes.map((text, index) => (\r\n                    <Note\r\n                        text={text}\r\n                        key={index}\r\n                        onDelete={() => this.props.onDelete(index)}\r\n                    />\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Notes from './components/Notes';\nimport { Container } from 'react-bootstrap';\nimport { withoutIndex } from './components/utils';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: [\n        \"**вигуляти собаку**\",\n        \"**сходити в магазин**\",\n        \"**заняття у спортзалі**\",\n      ]\n    }\n  }\n\n  onNoteDelete = indexToRemove => {\n    this.setState(oldstate => {\n      return {\n        notes: withoutIndex(oldstate.notes, indexToRemove)\n      };\n    });\n  };\n\n  onNoteCreate = newNoteText => {\n    this.setState(oldstate => {\n      return {\n        notes: [newNoteText].concat(oldstate.notes)\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Container>\n          <Notes\n            notes={this.state.notes}\n            onDelete={this.onNoteDelete}\n            onCreate={this.onNoteCreate}\n          />\n        </Container>\n      </div>\n    )\n  }\n}\n","export const withoutIndex = (array, index) => \r\n    array.slice(0, index).concat(array.slice(index + 1));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}